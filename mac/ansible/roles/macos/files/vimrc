""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   プラグインの設定
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

    " 対応カッコ等の自動入力
    Plug 'kana/vim-smartinput'

    " オペレーター拡張
    Plug 'kana/vim-operator-user'

    " kana/vim-operator-userを使って、クリップボードを使った置換
    Plug 'kana/vim-operator-replace'

    " 編集中のコード実行
    Plug 'thinca/vim-quickrun'

    " インデント色付け
    Plug 'nathanaelkane/vim-indent-guides'
    let g:indent_guides_enable_on_vim_startup = 1

    " コメントON/OFFを手軽に実行
    Plug 'tomtom/tcomment_vim'

    " ファイルオープンを便利に
    Plug 'Shougo/unite.vim'

    " editorconfig
    Plug 'editorconfig/editorconfig-vim'

    " Unite.vimで最近使ったファイルを表示できるようにする
    Plug 'Shougo/neomru.vim'

    " Terraformインデント
    Plug 'hashivim/vim-terraform'

    " Terraform補完
    Plug 'juliosueiras/vim-terraform-completion'

    """"""""""""""""""""""""""""""
    " Unit.vimの設定
    """"""""""""""""""""""""""""""
    " 入力モードで開始する
    " let g:unite_enable_start_insert=1
    " バッファ一覧
    noremap <C-N> :Unite buffer<CR>
    " ファイル一覧
    noremap <C-L> :Unite -buffer-name=file file<CR>
    " 最近使ったファイルの一覧
    noremap <C-Z> :Unite file_mru<CR>
    " sourcesを「今開いているファイルのディレクトリ」とする
    noremap :uff :<C-u>UniteWithBufferDir file -buffer-name=file<CR>
    " ESCキーを2回押すと終了する
    au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

    " ファイルをtree表示してくれる
    Plug 'scrooloose/nerdtree'
    " ファイル指定で開かれた場合はNERDTreeは表示しない
    if !argc()
        autocmd vimenter * NERDTree|normal gg3j
    endif

    Plug 'junegunn/vim-emoji'
    set completefunc=emoji#complete

    """"""""""""""""""""""""""""""
    " hashivim/vim-terraformの設定
    """"""""""""""""""""""""""""""
    " インデント補正をsave時に自動実行
    let g:terraform_fmt_on_save = 1

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   その他の設定
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number         " 行番号を表示する
set cursorline     "カーソル行に下線をひく
set cmdheight=2    " メッセージ表示欄を2行確保
" エディタウィンドウの末尾から2行目にステータスラインを常時表示させる
set laststatus=2
" ステータス行に表示させる情報の指定(どこからかコピペしたので細かい意味はわかっていない)
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P
set showmatch      " 対応する括弧を強調表示

" カーソル移動関連の設定
set backspace=indent,eol,start " Backspaceキーの影響範囲に制限を設けない
set whichwrap=b,s,h,l,<,>,[,]  " 行頭行末の左右移動で行をまたぐ
set scrolloff=8                " 上下8行の視界を確保
set sidescrolloff=16           " 左右スクロール時の視界を確保

" ファイル処理関連の設定
set confirm    " 保存されていないファイルがあるときは終了前に保存確認
set hidden     " 保存されていないファイルがあるときでも別のファイルを開くことが出来る
set autoread   "外部でファイルに変更がされた場合は読みなおす
set nobackup   " ファイル保存時にバックアップファイルを作らない
set noswapfile " ファイル編集中にスワップファイルを作らない

" 検索/置換の設定
set hlsearch   " 検索文字列をハイライトする
set incsearch  " インクリメンタルサーチを行う
set ignorecase " 大文字と小文字を区別しない
set smartcase  " 大文字と小文字が混在した言葉で検索を行った場合に限り、大文字と小文字を区別する
set wrapscan   " 最後尾まで検索を終えたら次の検索で先頭に移る

" タブ/インデントの設定
set tabstop=2     " 画面上でタブ文字が占める幅
set shiftwidth=2  " 自動インデントでずれる幅
set softtabstop=2 " 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
set smartindent   " 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis

set expandtab     " タブ入力を複数の空白入力に置き換える

" OSのクリップボードをレジスタ指定無しで Yank, Put 出来るようにする
set clipboard=unnamed,unnamedplus

" コマンドラインの設定
" コマンドラインモードでTABキーによるファイル名補完を有効にする
set wildmenu wildmode=list:longest,full
set wildignore=*.o,*.obj,*.pyc,*.so,*.dll
" コマンドラインの履歴を10000件保存する
set history=10000

" ビープの設定
set visualbell t_vb= "ビープ音すべてを無効にする
set noerrorbells "エラーメッセージの表示時にビープを鳴らさない

syntax on
" カラースキーマの指定
colorscheme murphy
" 一行あたりのシンタックスチェック列数を指定
set synmaxcol=200

" http://inari.hatenablog.com/entry/2014/05/05/231307
""""""""""""""""""""""""""""""
" 全角スペースの表示
""""""""""""""""""""""""""""""
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction

if has('syntax')
    augroup ZenkakuSpace
    autocmd!
    autocmd ColorScheme * call ZenkakuSpace()
    autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')
    augroup END
    call ZenkakuSpace()
endif
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" 最後のカーソル位置を復元する
""""""""""""""""""""""""""""""
if has("autocmd")
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \ exe "normal! g'\"" |
    \ endif
endif
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" 拡張子で別ファイル読込
""""""""""""""""""""""""""""""
" filetypeの自動検出(最後の方に書いた方がいいらしい)
filetype on

autocmd BufRead,BufNewFile *.py setfiletype python
autocmd BufRead,BufNewFile *.rb setfiletype ruby
autocmd BufRead,BufNewFile *.php setfiletype php
autocmd BufRead,BufNewFile *.gp setfiletype go
